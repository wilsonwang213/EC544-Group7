var SerialPort = require("serialport");
var app = require('express')();
var xbee_api = require('xbee-api');

var csvWriter = require('csv-write-stream');
var fs = require('fs');
var writer = csvWriter();
writer.pipe(fs.createWriteStream('out.csv'));

var i = 0;
// var j = 1;
// var m = 1;
// var n = 1;
var answer = 1;

var C = xbee_api.constants;
var XBeeAPI = new xbee_api.XBeeAPI({
  api_mode: 2
});

var portName = process.argv[2];

var sampleDelay = 2000;

var app = require('express')();
var express=require('express');
var http = require('http').Server(app);
var io = require('socket.io')(http);
var KNN = require('ml-knn');

app.use('/fonts', express.static(__dirname + 'webpage/fonts'));
app.use('/images', express.static(__dirname + '/webpage/images'));
app.use('/', express.static(__dirname + '/webpage'));


app.get('/localization', function(req, res){
  res.sendfile('webpage/index.html');
});

var knn = new KNN();

var trainingSet =
[[67,77,53,40],[72,79,52,53],[63,80,55,57],[70,76,66,60],[64,73,68,60],[61,79,73,68],
[62,66,72,62], [56,72,80,70],[55,59,71,77],[36,51,78,79],[56,45,82,78],[57,43,78,84],
[51,37,72,74],[64,48,67,71],[70,50,63,69],[72,54,59,67],[74,66,55,65],[80,70,50,60],
[82,68,66,62],[82,73,53,55],[77,66,50,54],[77,63,48,44],[80,80,46,50],[77,78,48,40]]
// [72,82,50,48],[73,85,51,51],[73,76,52,46],[79,77,51,57],[74,78,57,46],[71,80,52,49],[72,76,52,44],[78,77,53,43],[79,79,54,40],[72,81,52,43],
// [62,78,57,59],[62,75,54,54],[65,81,63,56],[64,82,57,55],[62,80,56,59],[62,78,57,61],[63,75,53,56],[68,80,56,56],[67,82,56,60],[67,82,57,51],
// [70,74,62,54],[72,78,64,58],[70,78,65,56],[77,79,64,61],[68,78,64,59],[76,76,53,57],[68,74,66,63],[63,81,65,64],[70,78,64,57],[70,77,70,57],
// [66,74,66,57],[66,76,67,58],[67,81,72,61],[64,77,75,58],[74,79,69,57],[64,75,73,65],[63,79,73,69],[76,83,68,64],[64,72,75,55],[70,73,65,60],
// [62,77,73,70],[61,81,84,67],[61,82,73,63],[63,82,74,70],[61,69,74,73],[63,80,74,72],[62,80,76,67],[63,83,75,68],[64,76,76,66],[60,73,76,68],
// [61, 67, 76, 65], [58, 65, 82 ,65], [68, 72, 84, 61], [66, 66, 81, 61], [61, 67, 73, 65], [60, 67, 75, 62], [63, 63, 78, 68],
// [59, 66, 72, 70], [57, 63, 79, 67], [61, 65, 75, 62],
// [57, 72, 83, 79], [59, 68, 74, 72], [57, 70, 81, 74], [54, 75, 80, 80], [56, 68, 78, 65], [52, 75, 75, 72], [55, 72, 75, 78],
// [57, 72, 83, 79], [56, 70, 81, 79], [58, 64, 75, 72],
// [50, 54, 77, 76], [59, 60, 83, 82], [57, 60, 73, 82], [55, 61, 70, 77], [52, 62, 75, 74], [50, 59, 71, 76], [53, 66, 78, 71],
// [54, 58, 80, 76], [56, 59, 74, 77], [58, 60, 74, 80],
// [37, 48, 74, 79], [36, 49, 75, 78], [36, 52, 76, 77], [38, 51, 76, 83], [49, 54, 83, 79], [37, 51, 80, 74], [36, 50, 78, 69],
// [36, 51, 78, 73], [37, 51, 80, 74], [36, 52, 77, 75],
// [55, 47, 80, 78], [67, 46, 79, 76], [63, 45, 81, 76], [59, 46, 81, 79], [55, 45, 82, 75], [53, 45, 82, 77], [50, 48, 81, 74],
// [52, 43, 85, 81], [59, 48, 79, 75], [58, 45, 80, 81],
// [60, 44, 78, 84], [49, 51, 80, 81], [51, 44, 81, 82], [55, 45, 82, 80], [51, 47, 80, 84], [69, 44, 82, 85], [50, 61, 79, 83],
// [52, 54, 84, 86], [60, 45, 81, 81], [52, 47, 82, 77],
// [50,37,76,77], [49,38,73,79], [51,44,64,81], [54,37,69,76], [51,41,74,74], [52,39,70,76], [60,39,75,72], [55,39,72,73], [54,39,67,73],
// [56,39,67,72],
// [65,53,68,78], [62,60,62,78], [67,64,62,80], [59,53,60,78], [72,52,60,76], [77,50,64,75], [75,52,60,75], [67,51,58,73], [63,58,63,77],
// [64,52,62,75],
// [60,51,65,72], [60,52,66,71], [61,51,64,73], [59,48,64,73], [63,49,65,72], [64,51,69,75], [69,50,62,73], [66,51,63,71], [66,50,64,69],
// [67,49,59,67],
// [74,56,71,76], [69,55,75,80], [67,64,70,75], [70,65,69,78], [67,62,78,80], [65,70,69,80], [70,67,63,81], [67,61,62,76], [69,60,75,72],
// [67,65,70,80],
// [69,73,64,79], [63,75,69,72], [68,73,65,75], [68,70,61,73], [69,76,63,81], [67,76,72,73], [70,74,67,69], [70,79,75,71], [70,77,73,73],
// [69,76,73,72],
// [82,71,53,63], [77,71,52,63], [76,77,52,66], [79,69,54,64], [83,67,52,64], [77,71,52,63], [77,72,52,64], [83,71,52,63], [81,81,55,61],
// [81,78,56,63],
//
// [83,75,63,59],[81,77,62,61],[85,77,63,60],[80,78,55,57],[75,76,62,56],[78,67,63,60],[75,72,62,58],[80,68,67,60],[83,75,64,63],[81,71,61,62],
//
// [76,67,51,54],[77,65,51,53],[81,71,54,56],[81,73,54,56],[79,72,54,56],[82,73,54,56],[81,73,55,57],[81,73,55,57],[81,67,55,55],[77,68,49,53],
//
// [77,65,45,56],[73,66,47,62],[75,64,51,51],[75,63,49,57],[76,64,46,55],[76,65,54,54],[76,64,48,54],[76,63,49,54],[73,64,50,54],[76,64,45,57],
//
// [80,70,39,44],[84,78,40,43],[80,67,41,43],[75,64,45,45],[76,66,40,43],[75,65,39,44],[72,67,37,43],[72,75,37,44],[78,71,43,45],[81,66,45,52],
//
// [80,81,44,56],[78,82,47,46],[82,81,44,49],[79,80,45,47],[81,84,45,50],[81,85,45,53],[75,82,45,54],[80,82,46,49],[82,82,48,52],[78,82,46,53]]

//[77,83,53,41],[72,80,51,40],[73,80,51,40],[75,85,51,40],[75,78,49,41],[77,77,49,41],[82,74,50,41],[77,77,46,41],[78,79,50,42],[74,78,49,43]]




var predictions = [
 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
 13,14,15,16,17,18,19,20,21,22,23,24];
//  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
//  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
//  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
//  5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
//  6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
//  7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
//  8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
//  9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
//  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
//  11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
//  12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
//  13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
//  14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
//  15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
//  16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
//  17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
//  18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
//  19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
//  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
//  21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
//  22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
//  23, 23, 23, 23, 23, 23, 23, 23, 23, 23];
 //24, 24, 24, 24, 24, 24, 24, 24, 24, 24];

knn.train(trainingSet, predictions);

knn.k = 1;

var sum = 0;
var dataset = [[0,0,0,0]];
var dataset1 = [[0,0,0,0]];
var dataset2 = [[0,0,0,0]];
var dataset3 = [[0,0,0,0]];
var datasetavg = [[0,0,0,0]];

//Note that with the XBeeAPI parser, the serialport's "data" event will not fire when messages are received!
portConfig = {
  baudRate: 9600,
  parser: XBeeAPI.rawParser()
};

io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('disconnect', function(){
  });
});

http.listen(4000, function(){
  //listen on localhost port 4000
  console.log('listening on *:4000');
});


var sp;
sp = new SerialPort.SerialPort(portName, portConfig);


//Create a packet to be sent to all other XBEE units on the PAN.
// The value of 'data' is meaningless, for now.
var RSSIRequestPacket = {
  type: C.FRAME_TYPE.ZIGBEE_TRANSMIT_REQUEST,
  destination64: "000000000000ffff",
  broadcastRadius: 0x01,
  options: 0x00,
  data: "test"
}

var requestRSSI = function(){
  sp.write(XBeeAPI.buildFrame(RSSIRequestPacket));
  console.log("**********************************************************");
  //if(answer > 0 && answer < 25) {
    io.emit('location', answer);
    //console.log("dataset: " + dataset);
    console.log("answer: " + answer);
  //}
  writer.write({start: "DATA", Beacon1:"", Beacon2:"", Beacon3:"", Beacon4:""});
}

sp.on("open", function () {
  console.log('open');
  requestRSSI();
  setInterval(requestRSSI, sampleDelay);
});

XBeeAPI.on("frame_object", function(frame) {
  if (frame.type == 144){
    console.log("Beacon ID: " + frame.data[1] + ", RSSI: " + (frame.data[0]));
    if(frame.data[1] == 1)
    {

      dataset[0][0] = frame.data[0];
      //console.log("Beacon 1 : " + dataset[0][0]);
      i++;

    }
    if(frame.data[1] == 2)
    {

      dataset[0][1] = frame.data[0];
      //console.log("Beacon 2 : " + dataset[0][1]);
      i++;
    }
    if(frame.data[1] == 3)
    {

      dataset[0][2] = frame.data[0];
      //console.log("Beacon 3 : " + dataset[0][2]);
      i++;
    }
    if(frame.data[1] == 4)
    {

      dataset[0][3] = frame.data[0];
      //console.log("Beacon 4 : " + dataset[0][3]);
      i++;
    }

    if(i == 4) {
      write.write({Beacon1:dataset[0][0], Beacon2:dataset[0][1], Beacon3:dataset[0][2], Beacon4:dataset[0][3] })
      i = 0;
    }


    sum++;
    if (sum<3)
    {
    	switch(sum)
    	{
    		case 1:
    			dataset1 = dataset;
    			break;
    		case 2:
    			dataset2 = dataset1;
    			dataset1 = dataset;
    			break; 
    	}
    	answer = knn.predict(dataset);
    	//io.emit('location', ans);
    	//console.log("answer: " + ans);
	}
	else
	{
		dataset3 = dataset2;
		dataset2 = dataset1;
		dataset1 = dataset;
		var d1 = 0;
		var d2 = 0;
		var d3 = 0;
		var d4 = 0;
		d1 = dataset1[0][0] + dataset2[0][0] + dataset3[0][0];
		d2 = dataset1[0][1] + dataset2[0][1] + dataset3[0][1];
		d3 = dataset1[0][2] + dataset2[0][2] + dataset3[0][2];
		d4 = dataset1[0][3] + dataset2[0][3] + dataset3[0][3];
		datasetavg[0][0] = d1;
		datasetavg[0][1] = d2;
		datasetavg[0][2] = d3;
		datasetavg[0][3] = d4;		
		answer = knn.predict(datasetavg);
    //io.emit('location', ans);
    //console.log("answer: " + ans);
	}
    
    //answer = knn.predict(dataset);
    // io.emit('location', answer);
    // console.log("answer: " + answer);
  }
});